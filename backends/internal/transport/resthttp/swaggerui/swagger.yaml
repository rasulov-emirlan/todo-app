basePath: /api
consumes:
- application/json
definitions:
  MemStats:
    properties:
      Alloc:
        description: |-
          Alloc is bytes of allocated heap objects.

          This is the same as HeapAlloc (see below).
        format: uint64
        type: integer
      BuckHashSys:
        description: BuckHashSys is bytes of memory in profiling bucket hash tables.
        format: uint64
        type: integer
      BySize:
        description: |-
          BySize reports per-size class allocation statistics.

          BySize[N] gives statistics for allocations of size S where
          BySize[N-1].Size < S ≤ BySize[N].Size.

          This does not report allocations larger than BySize[60].Size.
        items:
          properties:
            Frees:
              description: |-
                Frees is the cumulative count of heap objects freed
                in this size class.
              format: uint64
              type: integer
            Mallocs:
              description: |-
                Mallocs is the cumulative count of heap objects
                allocated in this size class. The cumulative bytes
                of allocation is Size*Mallocs. The number of live
                objects in this size class is Mallocs - Frees.
              format: uint64
              type: integer
            Size:
              description: |-
                Size is the maximum byte size of an object in this
                size class.
              format: uint32
              type: integer
          type: object
        type: array
      DebugGC:
        description: DebugGC is currently unused.
        type: boolean
      EnableGC:
        description: |-
          EnableGC indicates that GC is enabled. It is always true,
          even if GOGC=off.
        type: boolean
      Frees:
        description: Frees is the cumulative count of heap objects freed.
        format: uint64
        type: integer
      GCCPUFraction:
        description: |-
          GCCPUFraction is the fraction of this program's available
          CPU time used by the GC since the program started.

          GCCPUFraction is expressed as a number between 0 and 1,
          where 0 means GC has consumed none of this program's CPU. A
          program's available CPU time is defined as the integral of
          GOMAXPROCS since the program started. That is, if
          GOMAXPROCS is 2 and a program has been running for 10
          seconds, its "available CPU" is 20 seconds. GCCPUFraction
          does not include CPU time used for write barrier activity.

          This is the same as the fraction of CPU reported by
          GODEBUG=gctrace=1.
        format: double
        type: number
      GCSys:
        description: GCSys is bytes of memory in garbage collection metadata.
        format: uint64
        type: integer
      HeapAlloc:
        description: |-
          HeapAlloc is bytes of allocated heap objects.

          "Allocated" heap objects include all reachable objects, as
          well as unreachable objects that the garbage collector has
          not yet freed. Specifically, HeapAlloc increases as heap
          objects are allocated and decreases as the heap is swept
          and unreachable objects are freed. Sweeping occurs
          incrementally between GC cycles, so these two processes
          occur simultaneously, and as a result HeapAlloc tends to
          change smoothly (in contrast with the sawtooth that is
          typical of stop-the-world garbage collectors).
        format: uint64
        type: integer
      HeapIdle:
        description: |-
          HeapIdle is bytes in idle (unused) spans.

          Idle spans have no objects in them. These spans could be
          (and may already have been) returned to the OS, or they can
          be reused for heap allocations, or they can be reused as
          stack memory.

          HeapIdle minus HeapReleased estimates the amount of memory
          that could be returned to the OS, but is being retained by
          the runtime so it can grow the heap without requesting more
          memory from the OS. If this difference is significantly
          larger than the heap size, it indicates there was a recent
          transient spike in live heap size.
        format: uint64
        type: integer
      HeapInuse:
        description: |-
          HeapInuse is bytes in in-use spans.

          In-use spans have at least one object in them. These spans
          can only be used for other objects of roughly the same
          size.

          HeapInuse minus HeapAlloc estimates the amount of memory
          that has been dedicated to particular size classes, but is
          not currently being used. This is an upper bound on
          fragmentation, but in general this memory can be reused
          efficiently.
        format: uint64
        type: integer
      HeapObjects:
        description: |-
          HeapObjects is the number of allocated heap objects.

          Like HeapAlloc, this increases as objects are allocated and
          decreases as the heap is swept and unreachable objects are
          freed.
        format: uint64
        type: integer
      HeapReleased:
        description: |-
          HeapReleased is bytes of physical memory returned to the OS.

          This counts heap memory from idle spans that was returned
          to the OS and has not yet been reacquired for the heap.
        format: uint64
        type: integer
      HeapSys:
        description: |-
          HeapSys is bytes of heap memory obtained from the OS.

          HeapSys measures the amount of virtual address space
          reserved for the heap. This includes virtual address space
          that has been reserved but not yet used, which consumes no
          physical memory, but tends to be small, as well as virtual
          address space for which the physical memory has been
          returned to the OS after it became unused (see HeapReleased
          for a measure of the latter).

          HeapSys estimates the largest size the heap has had.
        format: uint64
        type: integer
      LastGC:
        description: |-
          LastGC is the time the last garbage collection finished, as
          nanoseconds since 1970 (the UNIX epoch).
        format: uint64
        type: integer
      Lookups:
        description: |-
          Lookups is the number of pointer lookups performed by the
          runtime.

          This is primarily useful for debugging runtime internals.
        format: uint64
        type: integer
      MCacheInuse:
        description: MCacheInuse is bytes of allocated mcache structures.
        format: uint64
        type: integer
      MCacheSys:
        description: |-
          MCacheSys is bytes of memory obtained from the OS for
          mcache structures.
        format: uint64
        type: integer
      MSpanInuse:
        description: MSpanInuse is bytes of allocated mspan structures.
        format: uint64
        type: integer
      MSpanSys:
        description: |-
          MSpanSys is bytes of memory obtained from the OS for mspan
          structures.
        format: uint64
        type: integer
      Mallocs:
        description: |-
          Mallocs is the cumulative count of heap objects allocated.
          The number of live objects is Mallocs - Frees.
        format: uint64
        type: integer
      NextGC:
        description: |-
          NextGC is the target heap size of the next GC cycle.

          The garbage collector's goal is to keep HeapAlloc ≤ NextGC.
          At the end of each GC cycle, the target for the next cycle
          is computed based on the amount of reachable data and the
          value of GOGC.
        format: uint64
        type: integer
      NumForcedGC:
        description: |-
          NumForcedGC is the number of GC cycles that were forced by
          the application calling the GC function.
        format: uint32
        type: integer
      NumGC:
        description: NumGC is the number of completed GC cycles.
        format: uint32
        type: integer
      OtherSys:
        description: |-
          OtherSys is bytes of memory in miscellaneous off-heap
          runtime allocations.
        format: uint64
        type: integer
      PauseEnd:
        description: |-
          PauseEnd is a circular buffer of recent GC pause end times,
          as nanoseconds since 1970 (the UNIX epoch).

          This buffer is filled the same way as PauseNs. There may be
          multiple pauses per GC cycle; this records the end of the
          last pause in a cycle.
        items:
          format: uint64
          type: integer
        type: array
      PauseNs:
        description: |-
          PauseNs is a circular buffer of recent GC stop-the-world
          pause times in nanoseconds.

          The most recent pause is at PauseNs[(NumGC+255)%256]. In
          general, PauseNs[N%256] records the time paused in the most
          recent N%256th GC cycle. There may be multiple pauses per
          GC cycle; this is the sum of all pauses during a cycle.
        items:
          format: uint64
          type: integer
        type: array
      PauseTotalNs:
        description: |-
          PauseTotalNs is the cumulative nanoseconds in GC
          stop-the-world pauses since the program started.

          During a stop-the-world pause, all goroutines are paused
          and only the garbage collector can run.
        format: uint64
        type: integer
      StackInuse:
        description: |-
          StackInuse is bytes in stack spans.

          In-use stack spans have at least one stack in them. These
          spans can only be used for other stacks of the same size.

          There is no StackIdle because unused stack spans are
          returned to the heap (and hence counted toward HeapIdle).
        format: uint64
        type: integer
      StackSys:
        description: |-
          StackSys is bytes of stack memory obtained from the OS.

          StackSys is StackInuse, plus any memory obtained directly
          from the OS for OS thread stacks (which should be minimal).
        format: uint64
        type: integer
      Sys:
        description: |-
          Sys is the total bytes of memory obtained from the OS.

          Sys is the sum of the XSys fields below. Sys measures the
          virtual address space reserved by the Go runtime for the
          heap, stacks, and other internal data structures. It's
          likely that not all of the virtual address space is backed
          by physical memory at any given moment, though in general
          it all was at some point.
        format: uint64
        type: integer
      TotalAlloc:
        description: |-
          TotalAlloc is cumulative bytes allocated for heap objects.

          TotalAlloc increases as heap objects are allocated, but
          unlike Alloc and HeapAlloc, it does not decrease when
          objects are freed.
        format: uint64
        type: integer
    title: A MemStats records statistics about the memory allocator.
    type: object
    x-go-package: runtime
  healthCheckResponse:
    description: This is all info we could get about this servers process
    properties:
      ActiveGoRoutines:
        format: int64
        type: integer
      MemoryUsage:
        $ref: '#/definitions/MemStats'
    type: object
    x-go-package: github.com/rasulov-emirlan/todo-app/backends/internal/transport/resthttp
  reqTodosCreate:
    description: This is a model used for creating todos and only for that
    properties:
      body:
        maxLength: 2000
        type: string
        x-go-name: Body
      deadline:
        example: "2022-06-23T22:16:50.782647Z"
        format: date-time
        type: string
        x-go-name: Deadline
      title:
        example: Do dishes tomorrow
        maxLength: 100
        minLength: 6
        type: string
        x-go-name: Title
    required:
    - title
    type: object
    x-go-package: github.com/rasulov-emirlan/todo-app/backends/internal/transport/resthttp
  reqTodosUpdate:
    description: This is info needed for updating a todo. Its 100% identical to reqTodosCreate
    properties:
      body:
        maxLength: 2000
        type: string
        x-go-name: Body
      deadline:
        example: "2022-06-23T22:16:50.782647Z"
        format: date-time
        type: string
        x-go-name: Deadline
      title:
        example: Do dishes tomorrow
        maxLength: 100
        minLength: 6
        type: string
        x-go-name: Title
    required:
    - title
    type: object
    x-go-package: github.com/rasulov-emirlan/todo-app/backends/internal/transport/resthttp
  reqUsersRefresh:
    description: reqUsersRefresh is used for mobile clients. They should send their
      refresh keys in this model to refresh endpoint for updating their keys
    properties:
      refreshKey:
        type: string
        x-go-name: RefreshKey
    type: object
    x-go-package: github.com/rasulov-emirlan/todo-app/backends/internal/transport/resthttp
  reqUsersSignIn:
    description: |-
      reqUsersSignIn
      represents all info needed for a user to sign in
    properties:
      email:
        description: the email address for this user
        example: user@example.com
        type: string
        x-go-name: Email
      password:
        description: password for this user
        example: password
        type: string
        x-go-name: Password
    required:
    - email
    - password
    type: object
    x-go-package: github.com/rasulov-emirlan/todo-app/backends/internal/transport/resthttp
  reqUsersSignUp:
    description: |-
      reqUsersSignUp
      represents all info needed for a user to sign up
      It is used only for signing up
    properties:
      email:
        description: the email address for this user
        example: user@example.com
        type: string
        x-go-name: Email
      password:
        description: the password for this user
        example: password
        maxLength: 128
        minLength: 6
        type: string
        x-go-name: Password
      username:
        description: the name for this user
        example: John Doe
        maxLength: 20
        minLength: 6
        type: string
        x-go-name: Username
    required:
    - email
    - password
    - username
    type: object
    x-go-package: github.com/rasulov-emirlan/todo-app/backends/internal/transport/resthttp
  respTodosCreate:
    properties:
      id:
        type: string
        x-go-name: ID
    title: This is an id of a newly created todo.
    type: object
    x-go-package: github.com/rasulov-emirlan/todo-app/backends/internal/transport/resthttp
  stdResponse:
    description: |-
      stdResponse
      represents the wrapper that all responses come inside of.
    properties:
      data:
        description: Actual Data that you expect to get on success. It will be omited
          if any errors occure
        x-go-name: Data
      errors:
        description: Error messages. It will not be omited if null
        items:
          type: string
        type: array
        x-go-name: Errors
    required:
    - errors
    - data
    type: object
    x-go-package: github.com/rasulov-emirlan/todo-app/backends/internal/transport/resthttp
info:
  contact:
    email: rasulov.emirlan@gmail.com
    name: Emirlan Rasulov
    url: https://github.com/rasulov-emirlan
  description: |-
    the purpose of this application is to learn more about REST and swagger

    This should demonstrate how to write clean code in go
    and communicate with it using http
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  termsOfService: there are no TOS at this moment, use at your own risk we take no
    responsibility
  title: Todo App API
  version: 0.0.1
paths:
  /health:
    get:
      consumes:
      - application/json
      description: This will return info about memory usage and goroutines
      operationId: healthCheck
      produces:
      - application/json
      responses:
        default:
          description: healthCheckResponse
          schema:
            $ref: '#/definitions/healthCheckResponse'
      schemes:
      - http
      - https
      summary: Checkup server
      tags:
      - healthcheck
  /todos:
    post:
      consumes:
      - application/json
      description: |-
        This will create a user in our database IF AND ONLY
        if he doesnt exist yet. After creating him it will automaticaly
        sign him in
      operationId: UsersSignUp
      parameters:
      - description: Basic info for user to sign up
        in: body
        name: user info
        required: true
        schema:
          $ref: '#/definitions/reqUsersSignUp'
          description: Basic info for user to sign up
          type: object
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/usersKeys'
        "422":
          description: stdResponse
          schema:
            $ref: '#/definitions/stdResponse'
        default:
          $ref: '#/responses/usersKeys'
      schemes:
      - http
      - https
      summary: Sign up a user
      tags:
      - auth
  /users/auth/logout:
    delete:
      consumes:
      - application/json
      description: This will delete refresh_key cookie.
      operationId: UsersLogout
      produces:
      - application/json
      responses:
        default:
          description: stdResponse
          schema:
            $ref: '#/definitions/stdResponse'
      schemes:
      - http
      - https
      summary: Logout
      tags:
      - auth
  /users/auth/refresh:
    post:
      consumes:
      - application/json
      description: |-
        This is supposed to return a new pair of keys. It will check the body for refresh key.
        If it wont find it in body, then it will check refresh_key Cookie. If both are empty then
        ur mad bro.
      operationId: UsersRefresh
      parameters:
      - description: Refresh key
        in: body
        name: refresh
        schema:
          $ref: '#/definitions/reqUsersRefresh'
          description: Refresh key
          type: object
      - description: Refresh Key
        name: refreshCookie
        type: string
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/usersKeys'
        "422":
          description: stdResponse
          schema:
            $ref: '#/definitions/stdResponse'
        default:
          $ref: '#/responses/usersKeys'
      schemes:
      - http
      - https
      summary: Refresh keys
      tags:
      - auth
  /users/auth/signin:
    post:
      consumes:
      - application/json
      description: This should return a pair of keys for the user, if user info provided
        is valid
      operationId: UsersSignIn
      parameters:
      - description: Basic info for user to sign up
        in: body
        name: user info
        required: true
        schema:
          $ref: '#/definitions/reqUsersSignIn'
          description: Basic info for user to sign up
          type: object
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/usersKeys'
        "422":
          description: stdResponse
          schema:
            $ref: '#/definitions/stdResponse'
        default:
          $ref: '#/responses/usersKeys'
      schemes:
      - http
      - https
      summary: Sign in a user
      tags:
      - auth
  /users/auth/signup:
    post:
      consumes:
      - application/json
      description: |-
        This will create a user in our database IF AND ONLY
        if he doesnt exist yet. After creating him it will automaticaly
        sign him in
      operationId: UsersSignUp
      parameters:
      - description: Basic info for user to sign up
        in: body
        name: user info
        required: true
        schema:
          $ref: '#/definitions/reqUsersSignUp'
          description: Basic info for user to sign up
          type: object
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/usersKeys'
        "422":
          description: stdResponse
          schema:
            $ref: '#/definitions/stdResponse'
        default:
          $ref: '#/responses/usersKeys'
      schemes:
      - http
      - https
      summary: Sign up a user
      tags:
      - auth
produces:
- application/json
- application/xml
responses:
  usersKeys:
    description: usersKeys represents a pair of keys used for authorization in our
      api
    headers:
      refresh_key:
        description: |-
          This cookie will contain refresh key

          in: cookie
        type: string
schemes:
- http
- https
security:
- Bearer:
  - '[]'
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
