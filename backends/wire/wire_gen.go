// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/rasulov-emirlan/todo-app/backends/config"
	"github.com/rasulov-emirlan/todo-app/backends/internal/domain/todos"
	"github.com/rasulov-emirlan/todo-app/backends/internal/domain/users"
	"github.com/rasulov-emirlan/todo-app/backends/internal/storage/postgres"
	"github.com/rasulov-emirlan/todo-app/backends/internal/transport/resthttp"
	"github.com/rasulov-emirlan/todo-app/backends/pkg/logging"
	"github.com/rasulov-emirlan/todo-app/backends/pkg/validation"
)

// Injectors from wire.go:

func InitializeRepo(config2 config.Config, logger *logging.Logger) (*postgres.Repository, error) {
	repository, err := postgres.NewRepository(config2, logger)
	if err != nil {
		return nil, err
	}
	return repository, nil
}

func InitializeLogger(config2 config.Config) (*logging.Logger, error) {
	logger, err := logging.NewLogger(config2)
	if err != nil {
		return nil, err
	}
	return logger, nil
}

func InitializeValidator() (*validation.Validator, error) {
	validator := validation.NewValidator()
	return validator, nil
}

// wire.go:

func InitializeRestApi(config2 config.Config,

	logger *logging.Logger,
	validator *validation.Validator,
	repository *postgres.Repository,
) (*resthttp.Server, error) {
	uS, err := users.NewService(repository.Users(), logger, validator, []byte(config2.JWTsecret))
	if err != nil {
		return nil, err
	}
	tS := todos.NewService(repository.Todos(), repository.Users(), logger, validator)
	if err != nil {
		return nil, err
	}
	return resthttp.NewServer(config2, logger, validator, uS, tS), nil
}
